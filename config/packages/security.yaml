security:
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  providers:
    users_in_memory: { memory: null }
    app_user_provider:
      entity:
        class: 'App\Entity\User'
        property: 'username'

  firewalls:
    api_token:
      pattern: ^/token$
      security: false
    api:
      pattern: ^/api
      security: true
      stateless: true
      oauth2: true
      provider: app_user_provider
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      login_throttling:
        max_attempts: 5
        interval: '5 minutes'
      lazy: true
      provider: app_user_provider
      custom_authenticator: App\Security\AppInterviewAuthenticator
      form_login:
        login_path: app_login
        check_path: app_login
        enable_csrf: true
        default_target_path: app_index
        use_referer: false
      logout:
        path: app_logout
        target: app_index
  role_hierarchy:
    ROLE_ADMIN: ROLE_USER
    ROLE_SUPER_ADMIN: ROLE_ADMIN

  access_control:
    - { path: ^/authorize, roles: PUBLIC_ACCESS }
    - { path: ^/login, role: PUBLIC_ACCESS }
    - { path: ^/token, role: PUBLIC_ACCESS }
    - { path: ^/.well-known, roles: PUBLIC_ACCESS }
    - { path: ^/cart, role: ROLE_USER }
    - { path: ^/api, role: ROLE_OAUTH2_EMAIL }
    - { path: ^/*, roles: PUBLIC_ACCESS }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4
        time_cost: 3
        memory_cost: 10
